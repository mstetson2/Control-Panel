package com.nolimitsframework.animation;

import com.nolimitsframework.transition.*;
import com.nolimitsframework.scenery.*;
import com.nolimitsframework.trigger.*;
import com.nolimitsframework.constraints.*;
import com.nolimitsframework.*;

import nlvm.math3d.*;
import nlvm.util.*;

public class Animation implements Process, Triggerable {

    private Transition obj = null;
    private Vector animationItems = new Vector();
    private Vector labels = new Vector();

    private bool isRunnning = false;
    private float endDuration = 0.0f;

    private float currentTick = -0.01f;

    private float stopTime = 0.0f;
    private float startTime = 0.0f;
    
    static public Animation createFromObject(Transition object) {
        Animation anim = new Animation("");
        anim.setObject(object);
        
        return anim;
    }

    public Animation(String query) {
        String InitType = "";
        String InitArguments = "";

        if(query.length() != 0) {
            Vector queryPieces = splitString(':', query);
            for (int i = 0; i < queryPieces.size(); i++) {
                StringBuilder a = (StringBuilder) queryPieces.elementAt(i);
                String queryPiece = trim(a.toString());

                if (i == 0) {
                    InitType = queryPiece;
                } else {
                    InitArguments = queryPiece;
                }
            }

            if (InitType.equals("Scenery")) {
                obj = new SceneryObject(InitArguments);
            } else {
                System.err.println("Animation query syntax error for expression '" + query + "'");
            }

            if (obj != null) {
                Framework.setProcess(this);
            }
        }
    }
    
    public void setObject(Transition object) {
        obj = object;
        
        if (obj != null) {
            Framework.setProcess(this);
        }
    }

    public void attachConstraint(Constraint constraint, bool ignoreProcess) {
        obj.attachConstraint(constraint, ignoreProcess);
    }
    
    public void attachConstraint(Constraint constraint) {
        obj.attachConstraint(constraint, false);
    }
    
    private Vector splitString(char split, String input) {
        Vector matches = new Vector();
        matches.addElement(new StringBuilder());

        for (int i = 0; i < input.length(); i++) {
            char c = input.charAt(i);
            if (c == split) {
                matches.addElement(new StringBuilder());
            } else {
                StringBuilder cs = (StringBuilder) matches.elementAt(matches.size() - 1);
                cs.append(c);
            }
        }

        return matches;
    }

    private String trim(String in) {
        String str = in;

        while (str.charAt(0) == ' ') {
            str = str.substring(1, str.length());
        }
        while (str.substring(str.length() - 1, str.length()).equals(" ")) {
            str = str.substring(0, str.length() - 1);
        }
        return str;
    }

    public Animation(Transition _obj) {
        obj = _obj;
        Framework.setProcess(this);
    }

    public void addAnimation(int parameter, float value, float from, float to, int easing) {
        float duration = to - from;
        if (to > endDuration) {
            endDuration = to;
        }
        animationItems.addElement(new AnimationItem(new TransitionProperty(parameter, (float) value), from, duration, easing));
    }

    public void addAnimation(int parameter, double value, float from, float to, int easing) {
        float duration = to - from;
        if (to > endDuration) {
            endDuration = to;
        }
        animationItems.addElement(new AnimationItem(new TransitionProperty(parameter, (float) value), from, duration, easing));
    }

    public void addAnimation(int parameter, int value, float from, float to, int easing) {
        float duration = to - from;
        if (to > endDuration) {
            endDuration = to;
        }
        animationItems.addElement(new AnimationItem(new TransitionProperty(parameter, (float) value), from, duration, easing));
    }

    public void addAnimation(int parameter, Vector3f value, float from, float to, int easing) {
        float duration = to - from;
        if (to > endDuration) {
            endDuration = to;
        }

        animationItems.addElement(new AnimationItem(new TransitionProperty(parameter + 10, (float) value.x), from, duration, easing));
        animationItems.addElement(new AnimationItem(new TransitionProperty(parameter + 11, (float) value.y), from, duration, easing));
        animationItems.addElement(new AnimationItem(new TransitionProperty(parameter + 12, (float) value.z), from, duration, easing));
    }

    public bool isInitSuccessfully() {
        return true;
    }

    public void proceed(float tick) {
        if (!isRunnning) {
            return;
        }

        if (currentTick > stopTime) {
            obj.stop();
            isRunnning = false;
            return;
        }

        for (int i = 0; i < animationItems.size(); i++) {
            AnimationItem item = (AnimationItem) animationItems.elementAt(i);
            if (!item.isRunning) {
                if (currentTick >= item.startTime) {
                    obj.setAnimationProperty(item.property.parameter, item.property.value);
                    obj.animate(currentTick - item.startTime, item.duration, item.easing);
                    item.isRunning = true;
                }
            }
        }

        currentTick += tick;
    }

    public void setLabel(String label, float startTime, float endTime) {
        labels.addElement(new AnimationLabel(label, startTime, endTime));
    }

    public void start() {
        currentTick = -0.01f;
        stopTime = endDuration;

        for (int i = 0; i < animationItems.size(); i++) {
            AnimationItem item = (AnimationItem) animationItems.elementAt(i);
            item.isRunning = false;
        }
        isRunnning = true;
    }

    public void start(String label) {
        bool found = false;
        for (int i = 0; i < labels.size(); i++) {
            AnimationLabel item = (AnimationLabel) labels.elementAt(i);
            if (item.label.equals(label)) {
                currentTick = item.startTime;
                stopTime = item.endTime;
                found = true;
            }
        }
        if (found == false) {
            System.err.println("Animation label '" + label + "' not found");
            return;
        }

        for (int i = 0; i < animationItems.size(); i++) {
            AnimationItem item = (AnimationItem) animationItems.elementAt(i);
            if (currentTick >= item.startTime + item.duration) {
                obj.setAnimationProperty(item.property.parameter, item.property.value);
                obj.setPropertyChangesToEnd();
                item.isRunning = true;
            } else {
                item.isRunning = false;
            }
        }
        isRunnning = true;
    }
    
    public Transition getObject() {
        return obj;
    }
}
